{
    "pick_and_place_simple": {
        "task_name": "put some pencil on shelf.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see bed_1, cabinet_4, cabinet_3, cabinet_2, cabinet_1, desk_1, drawer_2, drawer_1, garbagecan_1, shelf_1, and sidetable_1.",
        "skill_code": "# [Step 1] Define the list of receptacles and surfaces to check for a pencil\nrecep_to_check = ['bed_1', 'cabinet_4', 'cabinet_3', 'cabinet_2', 'cabinet_1', 'desk_1', 'drawer_2', 'drawer_1', 'garbagecan_1', 'shelf_1', 'sidetable_1']\n\n# [Step 2] Use 'find_object' method to search for the pencil\nobject_ids, receptacle_with_pencil = find_object(agent, recep_to_check, 'pencil')\nassert object_ids is not None, f'Error in [Step 2]: Pencil not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Take the pencil\nfound_pencil = object_ids[0]\nobservation = agent.take_from(found_pencil, receptacle_with_pencil)\nassert agent.holding == found_pencil, f'Error in [Step 3]: Failed to take the pencil from {receptacle_with_pencil}.'\n\n# [Step 4] Go to the shelf and put the pencil on it\nobservation = agent.go_to('shelf_1')\n# Check if the shelf is closed. If so, open it.\nif 'closed' in observation:\n    observation = agent.open('shelf_1')\nobservation = agent.put_in_or_on(found_pencil, 'shelf_1')\nassert 'put' in observation, f'Error in [Step 4]: Failed to put the pencil on shelf_1.'",
        "success": 1
    },
    "pick_heat_then_place_in_recep": {
        "task_name": "heat some mug and put it in cabinet.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see cabinet_13, cabinet_12, cabinet_11, cabinet_10, cabinet_9, cabinet_8, cabinet_7, cabinet_6, cabinet_5, cabinet_4, cabinet_3, cabinet_2, cabinet_1, coffeemachine_1, countertop_1, diningtable_1, drawer_1, fridge_1, garbagecan_1, microwave_1, shelf_3, shelf_2, shelf_1, sinkbasin_1, stoveburner_4, stoveburner_3, stoveburner_2, stoveburner_1, and toaster_1.",
        "skill_code": "# [Step 1] Define the list of receptacles and surfaces to check for a mug\nrecep_to_check = ['cabinet_13', 'cabinet_12', 'cabinet_11', 'cabinet_10', 'cabinet_9', 'cabinet_8', 'cabinet_7', 'cabinet_6', 'cabinet_5', 'cabinet_4', 'cabinet_3', 'cabinet_2', 'cabinet_1', 'coffeemachine_1', 'countertop_1', 'diningtable_1', 'drawer_1', 'fridge_1', 'garbagecan_1', 'microwave_1', 'shelf_3', 'shelf_2', 'shelf_1', 'sinkbasin_1', 'stoveburner_4', 'stoveburner_3', 'stoveburner_2', 'stoveburner_1', 'toaster_1']\n\n# [Step 2] Use 'find_object' method to search for the mug\nobject_ids, receptacle_with_mug = find_object(agent, recep_to_check, 'mug')\nassert object_ids is not None, f'Error in [Step 2]: Mug not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Take the mug\nfound_mug = object_ids[0]\nobservation = agent.take_from(found_mug, receptacle_with_mug)\nassert agent.holding == found_mug, f'Error in [Step 3]: Failed to take the mug from {receptacle_with_mug}.'\n\n# [Step 4] Heat the mug with the microwave\nobservation = agent.go_to('microwave_1')\nassert 'microwave_1' in observation, f'Error in [Step 4]: Failed to go to microwave_1.'\nobservation = agent.heat_with(found_mug, 'microwave_1')\nassert 'heat' in observation, f'Error in [Step 4]: Failed to heat the mug with microwave_1.'\n\n# [Step 5] Find an empty cabinet or one that can be used to store the mug\n# Since the task does not specify which cabinet to use, we will try to put the mug in the first cabinet that is not full.\nfor cabinet_number in range(1, 14):\n    cabinet_id = f'cabinet_{cabinet_number}'\n    observation = agent.go_to(cabinet_id)\n    # Check if the cabinet is closed. If so, open it.\n    if 'closed' in observation:\n        observation = agent.open(cabinet_id)\n    # If the cabinet is not full, put the mug in it.\n    if 'full' not in observation:\n        observation = agent.put_in_or_on(found_mug, cabinet_id)\n        assert 'put' in observation, f'Error in [Step 5]: Failed to put the mug in {cabinet_id}.'\n        break\n    # If the cabinet is full, close it and try the next one.\n    else:\n        agent.close(cabinet_id)",
        "success": 1
    },
    "pick_two_obj_and_place": {
        "task_name": "put two cd in sidetable.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see armchair_1, bed_1, diningtable_1, drawer_2, drawer_1, garbagecan_1, sidetable_2, and sidetable_1.",
        "skill_code": "# Helper method to find an object\ndef find_object(agent, recep_to_check, object_name):\n    for receptacle in recep_to_check:\n        observation = agent.go_to(receptacle)\n        # Check if we need to open the receptacle. If we do, open it.\n        if 'closed' in observation:\n            observation = agent.open(receptacle)\n        # Check if the object is in/on the receptacle.\n        if object_name in observation:\n            object_ids = get_object_with_id(observation, object_name)\n            return object_ids, receptacle\n    return None, None\n\n# [Step 1] Define the list of receptacles and surfaces to check for CDs\nrecep_to_check = ['armchair_1', 'bed_1', 'diningtable_1', 'drawer_2', 'drawer_1', 'garbagecan_1', 'sidetable_2', 'sidetable_1']\n\n# [Step 2] Use 'find_object' method to search for the first CD\nfirst_cd_ids, receptacle_with_first_cd = find_object(agent, recep_to_check, 'cd')\nassert first_cd_ids is not None, f'Error in [Step 2]: First CD not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Take the first CD\nfirst_cd = first_cd_ids[0]\nobservation = agent.take_from(first_cd, receptacle_with_first_cd)\nassert agent.holding == first_cd, f'Error in [Step 3]: Failed to take the first CD from {receptacle_with_first_cd}.'\n\n# [Step 4] Go to the sidetable and put the first CD in it\n# Assuming 'sidetable_1' is the target sidetable\nobservation = agent.go_to('sidetable_1')\nobservation = agent.put_in_or_on(first_cd, 'sidetable_1')\nassert 'put' in observation, f'Error in [Step 4]: Failed to put the first CD in sidetable_1.'\n\n# [Step 5] Use 'find_object' method to search for the second CD\n# Exclude the receptacle where the first CD was found\nrecep_to_check.remove(receptacle_with_first_cd)\nsecond_cd_ids, receptacle_with_second_cd = find_object(agent, recep_to_check, 'cd')\nassert second_cd_ids is not None, f'Error in [Step 5]: Second CD not found in any of the remaining receptacles: {recep_to_check}.'\n\n# [Step 6] Take the second CD\nsecond_cd = second_cd_ids[0]\nobservation = agent.take_from(second_cd, receptacle_with_second_cd)\nassert agent.holding == second_cd, f'Error in [Step 6]: Failed to take the second CD from {receptacle_with_second_cd}.'\n\n# [Step 7] Go back to the sidetable and put the second CD in it\n# Assuming 'sidetable_1' is still the target sidetable\nobservation = agent.go_to('sidetable_1')\nobservation = agent.put_in_or_on(second_cd, 'sidetable_1')\nassert 'put' in observation, f'Error in [Step 7]: Failed to put the second CD in sidetable_1.'",
        "success": 1
    },
    "look_at_obj_in_light": {
        "task_name": "look at plate under the desklamp.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see coffeetable_1, diningtable_1, drawer_4, drawer_3, drawer_2, drawer_1, dresser_1, garbagecan_1, sidetable_2, sidetable_1, and sofa_1.",
        "skill_code": "# Helper method to find an object\ndef find_object(agent, recep_to_check, object_name):\n    for receptacle in recep_to_check:\n        observation = agent.go_to(receptacle)\n        # Check if we need to open the receptacle. If we do, open it.\n        if 'closed' in observation:\n            observation = agent.open(receptacle)\n        # Check if the object is in/on the receptacle.\n        if object_name in observation:\n            object_ids = get_object_with_id(observation, object_name)\n            return object_ids, receptacle\n    return None, None\n\n# [Step 1] Define the list of receptacles and surfaces to check for the plate and desklamp\nrecep_to_check = ['coffeetable_1', 'diningtable_1', 'drawer_4', 'drawer_3', 'drawer_2', 'drawer_1', 'dresser_1', 'garbagecan_1', 'sidetable_2', 'sidetable_1', 'sofa_1']\n\n# [Step 2] Use 'find_object' method to search for the plate\nplate_ids, receptacle_with_plate = find_object(agent, recep_to_check, 'plate')\nassert plate_ids is not None, f'Error in [Step 2]: Plate not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Use 'find_object' method to search for the desklamp\ndesklamp_ids, receptacle_with_desklamp = find_object(agent, recep_to_check, 'desklamp')\nassert desklamp_ids is not None, f'Error in [Step 3]: Desklamp not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 4] Go to the location of the desklamp\nobservation = agent.go_to(receptacle_with_desklamp)\nassert 'You are at' in observation, f'Error in [Step 4]: Failed to go to the location of the desklamp: {receptacle_with_desklamp}.'\n\n# [Step 5] If the plate is not already at the desklamp's location, take the plate and bring it to the desklamp's location\nif receptacle_with_plate != receptacle_with_desklamp:\n    observation = agent.go_to(receptacle_with_plate)\n    assert 'You are at' in observation, f'Error in [Step 5]: Failed to go to the location of the plate: {receptacle_with_plate}.'\n    plate = plate_ids[0]\n    observation = agent.take_from(plate, receptacle_with_plate)\n    assert 'take' in observation, f'Error in [Step 5]: Failed to take {plate} from {receptacle_with_plate}.'\n    observation = agent.go_to(receptacle_with_desklamp)\n    assert 'You are at' in observation, f'Error in [Step 5]: Failed to go back to the location of the desklamp: {receptacle_with_desklamp}.'\n\n# [Step 6] Ensure that the desklamp is turned on if necessary\n# Since the task is to look at the plate under the desklamp, we assume that the desklamp needs to be on for proper examination.\n# The rule_6 suggests that we may not need an explicit 'use' action, but we'll turn on the desklamp to be sure.\ndesklamp = desklamp_ids[0]\nobservation = agent.use(desklamp)\nassert 'turn on' in observation or 'already on' in observation, f'Error in [Step 6]: Failed to turn on {desklamp}.'",
        "success": 1
    },
    "pick_cool_then_place_in_recep": {
        "task_name": "cool some mug and put it in shelf.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see cabinet_9, cabinet_8, cabinet_7, cabinet_6, cabinet_5, cabinet_4, cabinet_3, cabinet_2, cabinet_1, coffeemachine_1, countertop_3, countertop_2, countertop_1, drawer_9, drawer_8, drawer_7, drawer_6, drawer_5, drawer_4, drawer_3, drawer_2, drawer_1, fridge_1, garbagecan_1, microwave_1, shelf_3, shelf_2, shelf_1, sinkbasin_1, stoveburner_4, stoveburner_3, stoveburner_2, stoveburner_1, and toaster_1.",
        "skill_code": "# [Step 1] Define the list of receptacles and surfaces to check for a mug\nrecep_to_check = ['cabinet_9', 'cabinet_8', 'cabinet_7', 'cabinet_6', 'cabinet_5', 'cabinet_4', 'cabinet_3', 'cabinet_2', 'cabinet_1', 'coffeemachine_1', 'countertop_3', 'countertop_2', 'countertop_1', 'drawer_9', 'drawer_8', 'drawer_7', 'drawer_6', 'drawer_5', 'drawer_4', 'drawer_3', 'drawer_2', 'drawer_1', 'fridge_1', 'garbagecan_1', 'microwave_1', 'shelf_3', 'shelf_2', 'shelf_1', 'sinkbasin_1', 'stoveburner_4', 'stoveburner_3', 'stoveburner_2', 'stoveburner_1', 'toaster_1']\n\n# [Step 2] Use 'find_object' method to search for the mug\nobject_ids, receptacle_with_mug = find_object(agent, recep_to_check, 'mug')\nassert object_ids is not None, f'Error in [Step 2]: Mug not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Take the mug\nfound_mug = object_ids[0]\nobservation = agent.take_from(found_mug, receptacle_with_mug)\nassert agent.holding == found_mug, f'Error in [Step 3]: Failed to take the mug from {receptacle_with_mug}.'\n\n# [Step 4] Cool the mug with the fridge\nobservation = agent.go_to('fridge_1')\nassert 'fridge_1' in observation, f'Error in [Step 4]: Failed to go to fridge_1.'\nobservation = agent.cool_with(found_mug, 'fridge_1')\nassert 'cool' in observation, f'Error in [Step 4]: Failed to cool the mug with fridge_1.'\n\n# [Step 5] Find a shelf to put the mug on\n# Since the task does not specify which shelf to use, we will try to put the mug on the first shelf that is not full.\nfor shelf_number in range(1, 4):\n    shelf_id = f'shelf_{shelf_number}'\n    observation = agent.go_to(shelf_id)\n    # Check if the shelf is full. If not, put the mug on it.\n    if 'full' not in observation:\n        observation = agent.put_in_or_on(found_mug, shelf_id)\n        assert 'put' in observation, f'Error in [Step 5]: Failed to put the mug on {shelf_id}.'\n        break",
        "success": 1
    },
    "pick_clean_then_place_in_recep": {
        "task_name": "clean some soapbar and put it in cabinet.",
        "init_obs": "You are in the middle of a room. Looking quickly around you, you see cabinet_4, cabinet_3, cabinet_2, cabinet_1, countertop_1, garbagecan_1, handtowelholder_1, sinkbasin_2, sinkbasin_1, toilet_1, toiletpaperhanger_1, and towelholder_1.",
        "skill_code": "# [Step 1] Define the list of receptacles and surfaces to check for a soapbar\nrecep_to_check = ['cabinet_4', 'cabinet_3', 'cabinet_2', 'cabinet_1', 'countertop_1', 'garbagecan_1', 'handtowelholder_1', 'sinkbasin_2', 'sinkbasin_1', 'toilet_1', 'toiletpaperhanger_1', 'towelholder_1']\n\n# [Step 2] Use 'find_object' method to search for the soapbar\nobject_ids, receptacle_with_soapbar = find_object(agent, recep_to_check, 'soapbar')\nassert object_ids is not None, f'Error in [Step 2]: Soapbar not found in any of the receptacles: {recep_to_check}.'\n\n# [Step 3] Take the soapbar\nfound_soapbar = object_ids[0]\nobservation = agent.take_from(found_soapbar, receptacle_with_soapbar)\nassert agent.holding == found_soapbar, f'Error in [Step 3]: Failed to take the soapbar from {receptacle_with_soapbar}.'\n\n# [Step 4] Clean the soapbar with a sinkbasin\n# Assuming that sinkbasin_1 is not full and can be used to clean the soapbar\nobservation = agent.go_to('sinkbasin_1')\nassert 'sinkbasin_1' in observation, f'Error in [Step 4]: Failed to go to sinkbasin_1.'\nobservation = agent.clean_with(found_soapbar, 'sinkbasin_1')\nassert 'clean' in observation, f'Error in [Step 4]: Failed to clean the soapbar with sinkbasin_1.'\n\n# [Step 5] Find a cabinet to put the soapbar in\n# Since the task does not specify which cabinet to use, we will try to put the soapbar in the first cabinet that is not full.\nfor cabinet_number in range(1, 5):\n    cabinet_id = f'cabinet_{cabinet_number}'\n    observation = agent.go_to(cabinet_id)\n    # Check if we need to open the cabinet. If we do, open it.\n    if 'closed' in observation:\n        observation = agent.open(cabinet_id)\n    # Check if the cabinet is full. If not, put the soapbar in it.\n    if 'full' not in observation:\n        observation = agent.put_in_or_on(found_soapbar, cabinet_id)\n        assert 'put' in observation, f'Error in [Step 5]: Failed to put the soapbar in {cabinet_id}.'\n        break",
        "success": 1
    }
}