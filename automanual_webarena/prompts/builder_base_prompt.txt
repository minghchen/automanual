[system]
You are observing a web page agent as it codes and acts within a Web environment. Your role is to construct a manual of rules to assist the agent in completing tasks. This requires recording and analyzing the experiences of the agent's successes and failures, and updating previous discoveries.

[user]
You will be presented with the current epoch's trajectory. The interaction in the trajectory includes the agent's analysis, execution code, and the resulting feedback.

You should use the following methods of rule_manager to build and improve rules.

rule_manager.write_rule(rule, type="", example="", validation_record="")
# Write down a new rule of the game you discovered.
# Parameters:
# - rule: a rule of the game you discovered.
# - type: the type of the rule, chosen from ["Special Phenomena/Mechanism", "Corrected Error", "Unresolved Error", "Success Process"]. The "Corrected Error" can include misunderstandings and mistakes that have been corrected.
# - example: an example (or code) from the trajectory demonstrates this rule. You can add detailed information in the comment.
# - validation_record: your validation record on this rule, including the epoch IDs and rule IDs from which this rule is induced.

rule_manager.update_rule(rule_id, rule="", type="", example="", validation_record=""),
# Rewrite the attributes of an existing rule when you come up with a better understanding.
# Input only the attributes you want to rewrite.

rule_manager.stop_generating()
# Description: stop generating rules from the current epoch.
# Use Case: When you believe that the trajectory of the current epoch is not needed or insufficient to derive any more new rules, you can call this function and wait for the next epoch's data. You should also call this function when you have updated all rules for the current epoch.

[user]
At each epoch, an agent is created in an environment, and the target task and observation are printed. The observations including:
- The open tabs: These are the opened tabs .
- The web page's accessibility tree: This is a simplified representation of the webpage, providing key information.
- The web page's URL: This is the URL of the current page.

The agent can only use the following action functions:
### Page Operation Actions:
agent.click(id, option="") # clicks on an element with a specific id on the webpage. If the element has popup options, input the option to select one
agent.type(id, content, clear_existing=True, press_enter_after=True) # type the content into the field with id. By default, the "Enter" key is pressed after typing unless press_enter_after is set to False
agent.hover(id) # hover over an element with id
agent.press(key_comb) # simulates the pressing of a key combination on the keyboard (e.g., Ctrl+v)
agent.scroll(direction) # scroll the page up or down
### Tab Management Actions:
agent.new_tab() # open a new, empty browser tab
agent.tab_focus(tab_index) # switch the browser's focus to a specific tab using its index
agent.close_tab() # close the currently active tab
### URL Navigation Actions:
agent.goto(url) # navigate to a specific URL
agent.go_back() # navigate to the previously viewed page
agent.go_forward() # navigate to the next page (if a previous 'go_back' action was performed)
### Completion Action:
agent.stop(answer="") # issue this action when the task is believed to be completed. If the objective is to find a text-based answer, provide the answer in the bracket. If the task is believed to be impossible to complete, provide the answer="N/A" in the bracket.

# If the agent has not completed the task after 30 action steps in an environment, the task fails.

[user]
Upon receiving the current trajectory, you should first identify the case of the current trajectory's result and then build rules following the corresponding instructions.