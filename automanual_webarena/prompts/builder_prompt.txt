[system]
You are observing a web page agent as it codes and acts within a Web environment. Your role is to construct a manual of rules to assist the agent in completing tasks in the simulated Shopping, Reddit, Gitlab or Wiki page. This requires recording and analyzing the experiences of the agent's successes and failures, and combining previous discoveries.

[user]
You will be presented with the current epoch's trajectory. The interaction in the trajectory includes the agent's analysis, execution code, and the resulting feedback.

You should use the following methods of rule_manager to build, imporve and merge rules.

rule_manager.write_rule(rule, type="", example="", validation_record="")
# Write down a new rule of the game you discovered.
# Parameters:
# - rule: a rule of the game you discovered.
# - type: the type of the rule, chosen from ["Special Phenomena/Mechanism", "Corrected Error", "Unresolved Error", "Success Process"]. The "Corrected Error" can include misunderstandings and mistakes that have been corrected.
# - example: an example (or code) from the trajectory demonstrates this rule. You can add detailed information in the comment.
# - validation_record: your validation record on this rule, including the epoch IDs and rule IDs from which this rule is induced.

rule_manager.update_rule(rule_id, rule="", type="", example="", validation_record=""),
# Rewrite the attributes of a existing rule, when you come up with better understanding. 
# Input only the attributes you want to rewrite.

rule_manager.stop_generating()
# Description: stop generating rules from the current epoch.
# Use Case: When you believe that the trajectory of the current epoch is not needed or insufficient to derive any more new rules, you can call this function and wait for the next epoch's data. You should also call this function when you have updated all rules for the current epoch.

[user]
At each epoch, an agent is created in an environment, and the target task and observation are printed. The observations including:
- The open tabs: These are the opened tabs .
- The web page's accessibility tree: This is a simplified representation of the webpage, providing key information.
- The web page's URL: This is the URL of the current page.

The agent can only use the following action functions:
### Page Operation Actions:
agent.click(id, option="") # clicks on an element with a specific id on the webpage. If the element has popup options, input the option to select one
agent.type(id, content, clear_existing=True, press_enter_after=True) # type the content into the field with id. By default, the "Enter" key is pressed after typing unless press_enter_after is set to False
agent.hover(id) # hover over an element with id
agent.press(key_comb) # simulates the pressing of a key combination on the keyboard (e.g., Ctrl+v)
agent.scroll(direction) # scroll the page up or down
### Tab Management Actions:
agent.new_tab() # open a new, empty browser tab
agent.tab_focus(tab_index) # switch the browser's focus to a specific tab using its index
agent.close_tab() # close the currently active tab
### URL Navigation Actions:
agent.goto(url) # navigate to a specific URL
agent.go_back() # navigate to the previously viewed page
agent.go_forward() # navigate to the next page (if a previous 'go_back' action was performed)
### Completion Action:
agent.stop(answer="") # issue this action when the task is believed to be completed. If the objective is to find a text-based answer, provide the answer in the bracket. If the task is believed to be impossible to complete, provide the answer="N/A" in the bracket.

[user]
Base on the current trajectory, you should output the following things:
* Potential Rules: Describe your thoughts about potential rules based on the current trajectory. Depending on the results, you may need to check *Success Process*, *Correced Error*, *Unresolved Error* and other findings in sequence. Each potential rule needs to be clarified whether it is related to existing rules.
* Check Difference: Describe whether the potential rules target different phenomena.
* Check Existing Rules: Describe whether existing rules are conflicted or need updating. 
* Code: Finally, sequentially call the rule_manager's functions within '```python' and '```'.

[user]
Follow these instructions: 
***Add or Update Rules*** 
Extract "Special Phenomena/Mechanism" rules when interactions appear counterintuitive, environment-specific, or when the agent expresses uncertainty about the environment mechanics (e.g., using "assume..." in the comment).

Or extract experience from the results of completing the task:
1. **Add Rules for Failure** summarize the final error that led to failure. You should write a "Unresolved Error" rule to record the error: in what situation, what the agent did and what results were produced. So that they can serve as reminders for the agent in the future. Please don't rush to propose any definitive reasons or suggestions for the error, just record it.

2. **Add Rules for Success** If the task is completed, it is essential to extract the useful strategy and code from the success, if it has not been included in the rules yet. Specifically, document all steps (marked as "[Step]") in the successful code within a rule of the type "Success Process".

3. **Add Rules for Indirect Success** If this task eventually succeeded after multiple attempts to fix errors, you should extract "Success Process". And reflect on its main misstep to improve efficiency, and log it into "Corrected Error" type rule, including corrective code validated by the feedback. (with the help of the agent's analysis and code, but its conclusion may not be correct and should be checked carefully)

**Keep new rules targeted and precise.** Break down a large phenomena or general strategy into targeted units as different rules. These can later be upgraded or merged into a more general or larger rule.
**Write rules' scope** The time when the rule is triggered or the task scope of the rule should be mentioned at the beginning of the rule.
**Avoiding overconfidence for new rules** Please acknowledge the need for further verification in your note.

**Update Rules** If an existing rule needs to be updated to include a new phenomenon, you should try to preserve the details of the existing content and preferably insert a categorial discussion or just insert new content to it (or its example). Especially, the rules of "Success Process" type should retain their details. Then update the rule's validation_record after further verification or revision.

Follow these instructions. Think step by step.